####################################
# Modelagem com n usinas e n meses #
#   Rafael Pires Moreira Silva     #
####################################

using CSV
using Gurobi
using JuMP
using DataFrames 

# se o volume inicial é 10, o codigo fica correto para 2 meses
# se o volume_inicial é 100, fica correto para 1 mes.


#------------------------------------------------------------------------Dados---------------------------------------------------------------------------------------#

chuva_data = CSV.read("C:/Users/bruno/Desktop/IC/Dados/dados_demanda - chuva_meses.csv", DataFrame)
volume_inicial = [100]
custo_termo = [8,12,15]
Meses = 2
num_usinas_hidro = 1 #quantidade de hidro
n_termos = 3 #quantidade de termos
T = [10, 5 ,20] # Capacidade máxima das usinas termoelétricas
capacidade_hidro = [100]  # Capacidade das usinas hidroelétricas 
modelo = Model(Gurobi.Optimizer) #Criação do objeto do modelo
demanda = zeros(Meses)
for mes in 1:Meses
    demanda[mes] = 20
end
MW_por_litro= 0.1
MH = [10]
m_aux = Matrix(chuva_data)
M_chuva_data=m_aux[:,2:num_usinas_hidro+1]
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------#



#--------------------------------------------------------------------------Variáveis---------------------------------------------------------------------------------#
@variable(modelo, 0 <= termo[1:Meses, i = 1:n_termos] <= T[i]) # Variável de decisão para as usinas termoelétricas
@variable(modelo, 0 <= q_hidro[1:Meses, i = 1:num_usinas_hidro] <= capacidade_hidro[i]) # quandidade de agua turbinada para produção
@variable(modelo, 0 <= p_hidro[1:Meses, i = 1:num_usinas_hidro] <= MH[i]) # produção das hidroeletricas
@variable(modelo, 0 <= volume[1:Meses,i = 1:num_usinas_hidro]) #Varável de decisão para os volumes dos reservatórios
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------#



#-------------------------------------------------------------------------Restrições---------------------------------------------------------------------------------#

# Restrições para o volume


for mes in 1:Meses
    for usina in 1:num_usinas_hidro
        @constraint(modelo, p_hidro[mes,usina] == q_hidro[mes,usina]*MW_por_litro)
    end
end    

@constraint(modelo, volume[1, :] .== volume_inicial .- q_hidro[1, :])
for mes in 2:Meses
        # Restrição de volume para os próximos meses em cada usina considerando chuva e defluência
        for usina in 1:num_usinas_hidro
            @constraint(modelo, volume[mes, usina] .== volume[mes-1, usina]#=volume mes anterior =# - q_hidro[mes, usina]#=gasto de agua em cada mes em cada usina =#)
        end
end   

# Restrição de demanda para N meses
for mes in 1:Meses
    @constraint(modelo, sum(termo[mes,usina] for usina=1:n_termos) + sum(p_hidro[mes,usina] for usina in 1:num_usinas_hidro) == demanda[mes] )
end

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------#




#-----------------------------------------------------------------------Função objetivo------------------------------------------------------------------------------#
@objective(modelo, Min, sum(sum(custo_termo[usina]*termo[mes, usina] for usina = 1:n_termos) for mes = 1:Meses))
optimize!(modelo)
print(modelo)
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------#



#---------------------------------------------------------------------Verifaica a solução-----------------------------------------------------------------------------#
if termination_status(modelo) == MOI.OPTIMAL
    println("Uso de usinas termoelétricas por mês:")
    for i in 1:Meses
            println("Mês $i: ", [value(termo[i,j]) for j in 1:n_termos])
    end

    println("Uso de usinas hidroelétricas por mês:")
    for i in 1:Meses
        println("Mês $i: ", [value(q_hidro[i, j]) for j in 1:num_usinas_hidro])
    end

    println("Valor ótimo da função objetivo: ", objective_value(modelo))
else
    println("O modelo não encontrou uma solução ótima.")
end
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------#
